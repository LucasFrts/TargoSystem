package com.targosystem.varejo.produtos.infra.persistence;

import com.targosystem.varejo.produtos.domain.model.Categoria;
import com.targosystem.varejo.produtos.domain.model.CategoriaId; // Make sure this is imported
import com.targosystem.varejo.produtos.domain.repository.CategoriaRepository;
import com.targosystem.varejo.produtos.infra.persistence.entity.CategoriaJpaEntity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction; // Import EntityTransaction for transaction management
import jakarta.persistence.NoResultException;
import jakarta.persistence.TypedQuery;
import java.time.LocalDateTime; // Import LocalDateTime for mapping
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class CategoriaDao implements CategoriaRepository {

    private final EntityManager entityManager;

    public CategoriaDao(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    @Override
    public Optional<Categoria> findById(CategoriaId id) { // Corrected: parameter type is CategoriaId
        CategoriaJpaEntity entity = entityManager.find(CategoriaJpaEntity.class, id.value()); // Use .value() to get String ID
        return Optional.ofNullable(entity).map(this::toDomain);
    }

    @Override
    public Optional<Categoria> findByNome(String nome) {
        try {
            TypedQuery<CategoriaJpaEntity> query = entityManager.createQuery(
                    "SELECT c FROM CategoriaJpaEntity c WHERE c.nome = :nome", CategoriaJpaEntity.class);
            query.setParameter("nome", nome);
            return Optional.of(query.getSingleResult()).map(this::toDomain);
        } catch (NoResultException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<Categoria> findAll() {
        TypedQuery<CategoriaJpaEntity> query = entityManager.createQuery(
                "SELECT c FROM CategoriaJpaEntity c", CategoriaJpaEntity.class);
        return query.getResultList().stream()
                .map(this::toDomain)
                .collect(Collectors.toList());
    }

    @Override
    public Categoria save(Categoria categoria) {
        EntityTransaction transaction = null;
        try {
            transaction = entityManager.getTransaction();
            transaction.begin();

            CategoriaJpaEntity entity;
            // Check if it's a new category (ID not yet assigned or not found in DB)
            // Use .value() for CategoriaId
            if (categoria.getId() == null || entityManager.find(CategoriaJpaEntity.class, categoria.getId().value()) == null) {
                entity = CategoriaJpaEntity.fromDomain(categoria); // Maps domain to JPA entity
                entityManager.persist(entity); // New category will have its ID generated by JPA
                entityManager.flush(); // Forces ID generation and makes it available
            } else {
                entity = CategoriaJpaEntity.fromDomain(categoria); // Maps domain to JPA entity
                entity = entityManager.merge(entity); // Existing category, merge changes
            }

            transaction.commit();
            // Return the updated domain entity, ensuring it has the generated ID if new
            return toDomain(entity);
        } catch (RuntimeException e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            throw e;
        }
    }

    @Override
    public void delete(CategoriaId id) { // Corrected: parameter type is CategoriaId
        EntityTransaction transaction = null;
        try {
            transaction = entityManager.getTransaction();
            transaction.begin();

            CategoriaJpaEntity entity = entityManager.find(CategoriaJpaEntity.class, id.value()); // Use .value() to get String ID
            if (entity != null) {
                entityManager.remove(entity);
            }
            transaction.commit();
        } catch (RuntimeException e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            throw e;
        }
    }

    @Override
    public boolean existsByName(String nome) {
        try {

            TypedQuery<Long> query = entityManager.createQuery(
                    "SELECT COUNT(c) FROM CategoriaJpaEntity c WHERE c.nome = :nome", Long.class);
            query.setParameter("nome", nome);
            Long count = query.getSingleResult();

            return count > 0;
        } catch (RuntimeException e) {
            throw e;
        }
    }

    // --- Mappers between Domain and JPA Entity ---
    private Categoria toDomain(CategoriaJpaEntity entity) {
        if (entity == null) return null;
        // Use the full constructor that includes CategoriaId, dataCriacao, dataAtualizacao
        return new Categoria(
                new CategoriaId(entity.getId()), // Convert String ID to CategoriaId
                entity.getNome(),
                entity.getDescricao(),
                entity.getDataCriacao(),    // Pass dataCriacao
                entity.getDataAtualizacao() // Pass dataAtualizacao
        );
    }

    private CategoriaJpaEntity toJpaEntity(Categoria domain) {
        if (domain == null) return null;
        // Delegate to the static fromDomain method in CategoriaJpaEntity
        return CategoriaJpaEntity.fromDomain(domain);
    }
}